/********************************************************************************************************/
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred 
element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
For example:
Given BST [1,null,2,2],
   1
    \
     2
    /
   2
return [2].
/********************************************************************************************************/

class Solution {
map<int, int> mp;
vector<int> path;

public:
	void dfs(TreeNode *root)
	{
		if(root==NULL)
			return ;
		dfs(root->left);
		dfs(root->right);
		mp[root->val]++;
	}
	
    vector<int> findMode(TreeNode* root) {
		vector<int> ret;
		if(root==NULL)
			return ret;
		dfs(root);
		
		int maxTime=-1;
		for(auto it=mp.begin(); it!=mp.end(); it++)
			maxTime=max(maxTime, it->second);
		
		for(auto it=mp.begin(); it!=mp.end(); it++)
			if(it->second==maxTime)
				ret.push_back(it->first);
		return ret;
    }
};
