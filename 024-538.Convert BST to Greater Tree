/******************************************************************************************/
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the 
original BST is changed to the original key plus sum of all keys greater than the original
key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
/******************************************************************************************/

class Solution {
public:
	void doConvert(TreeNode *root, int &sum)
	{
		if(root==NULL)
			return ;
		doConvert(root->right, sum);
		root->val+=sum;
		sum=root->val;
		doConvert(root->left, sum);
	}

	TreeNode* convertBST(TreeNode *root)
	{
		int sum=0;
		doConvert(root, sum);
		return root;
	}
};
