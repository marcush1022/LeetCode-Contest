/*****************************************************************************/
Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.
/*****************************************************************************/

class Solution {
public:
	vector<vector<int>> levelOrder(TreeNode *root)
	{
		queue<TreeNode*> que;
		vector<vector<int>> res;
		vector<int> tmp;
		que.push(root);
		
		int level=0, count=1;
		while(!que.empty())
		{
			level=0;
			tmp.clear();
			for(int i=0; i<count; i++)
			{
				root=que.front();
				que.pop();
				tmp.push_back(root->val);
				if(root->left)
				{
					que.push(root->left);
					level++;
				}
				if(root->right)
				{
					que.push(root->right);
					level++;
				}
			}
			count=level;
			res.push_back(tmp);
		}
		return res;
	}

    int findBottomLeftValue(TreeNode* root) {
        if(root==NULL)
			return 0;
		
		vector<vector<int>> res;
		res=levelOrder(root);
		int bottonLeft=res[res.size()-1][0];
		return bottonLeft;
    }
};





