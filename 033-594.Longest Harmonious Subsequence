/**********************************************************************************/
We define a harmonious array is an array where the difference between its maximum 
value and its minimum value is exactly 1.

Now, given an integer array, you need to find the length of its longest harmonious 
subsequence among all its possible subsequences.

Example 1:
Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Note: The length of the input array will not exceed 20,000.
/**********************************************************************************/

I. Hash Map
class Solution {
public:
    int findLHS(vector<int>& nums) {
        int len=nums.size();
		if(len==0)
			return 0;
		int maxLen=0;
		
		map<int, int> map;
		for(int i=0; i<len; i++)
			map[nums[i]]++;
		for(auto iter:map)
		{
			if(map.count(iter.first+1))
				maxLen=max(maxLen, iter.second+map[iter.first+1]);
		}
		return maxLen;
    }
};

II. Two Pointers
class Solution {
public:
    int findLHS(vector<int>& nums) {
        int len=nums.size();
		if(len==0)
			return 0;
		std::sort(nums.begin(), nums.end());
		int left=0, right=0;
		int maxLen=0;
		while(left<=right && right<len)
		{
			if(nums[right]-nums[left]==1)
			{
				maxLen=max(maxLen, right-left+1);
				right++;
			}
			else if(nums[right]-nums[left]<1)
				right++;
			else
				left++;
		}
		return maxLen;
    }
};
