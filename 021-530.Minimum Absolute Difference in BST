/*************************************************************************************************/
Given a binary search tree with non-negative values, find the minimum absolute difference between 
values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
/*************************************************************************************************/

class Solution {
public:
	void inorderTraversal(TreeNode *root, vector<int> &path)
	{
		if(root==NULL)
			return ;
		if(root->left)
			inorderTraversal(root->left, path);
		path.push_back(root->val);
		if(root->right)
			inorderTraversal(root->right, path);
	}

    int getMinimumDifference(TreeNode* root) {
        if(root==NULL)
			return 0;
		vector<int> path;
		inorderTraversal(root, path);
		int minDiff=INT_MAX;
		for(int i=0; i<path.size()-1; i++)
		{
			int tmp=path[i+1]-path[i];
			minDiff=min(minDiff, tmp);
		}
		return minDiff;
    }
};
