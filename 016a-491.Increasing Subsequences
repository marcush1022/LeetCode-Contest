/********************************************************************************************/
Given an integer array, your task is to find all the different possible increasing 
subsequences of the given array, and the length of an increasing subsequence should be at least 2 .

Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
/********************************************************************************************/

class Solution {
public:
	void dfs(vector<int> nums, set<vector<int>> &ret, vector<int> tmp, int index)
	{
	
		if(tmp.size()>1)
		    ret.insert(tmp);

		for(int i=index; i<nums.size(); i++)
		{
		    if(tmp.size()==0 || nums[i]>=tmp.back())
			    tmp.push_back(nums[i]);
			dfs(nums, ret, tmp, i+1);
			tmp.pop_back();
		}
	}

    vector<vector<int>> findSubsequences(vector<int>& nums) {
        set<vector<int>> res;
        vector<vector<int>> ret;
		if(nums.size()==0)
			return ret;
		vector<int> tmp;
		dfs(nums, res, tmp, 0);
		return vector<vector<int>> (res.begin(), res.end());
    }
};
