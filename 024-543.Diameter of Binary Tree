/********************************************************************************************/
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter
of a binary tree is the length of the longest path between any two nodes in a tree. This path
may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them
/********************************************************************************************/

class Solution {
public:
	int getDepth(TreeNode* root)
	{
		if(root==NULL)
			return 0;
		int nLeft=getDepth(root->left);
		int nRight=getDepth(root->right);
		
		return (nLeft>nRight)?(nLeft+1):(nRight+1);
	}

	void getMaxDiameter(TreeNode* root, int &maxDiameter)
	{
		if(root==NULL)
			return ;
		int diameter=getDepth(root->left)+getDepth(root->right);
		maxDiameter=max(diameter, maxDiameter);
		getMaxDiameter(root->left, maxDiameter);
		getMaxDiameter(root->right, maxDiameter);
	}
	
    int diameterOfBinaryTree(TreeNode* root) {
        int maxDiameter=0;
		getMaxDiameter(root, maxDiameter);
		return maxDiameter;
    }
};
